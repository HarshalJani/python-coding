from functools import cmp_to_key

def compareVersion(version1: str, version2: str) -> int:
	
    version1, _, suffix1 = version1.partition('-')
    version2, _, suffix2 = version2.partition('-')
	
    v1 = list(map(int,version1.split('.')))
    v2 = list(map(int,version2.split('.')))
    length = max(len(v1),len(v2))
    i = 0

    while i < length:
        a = v1[i] if i < len(v1) else 0
        b = v2[i] if i < len(v2) else 0

        if a < b:
            return -1
        elif a > b:
            return 1
        
        i += 1
	
    #Move this before the v1 v2 initialization logic if we need to first comapre by suffix part	
    if suffix1 > suffix2:
        return 1
    elif suffix1 < suffix2:
        return -1
    
    return 0

def sort_version(versions_list):
    return sorted(versions_list, key = cmp_to_key(compareVersion))


def sort_version_manual(versions_list):
	for i in range(len(versions_list)):
		for j in range(i+1, len(versions_list)):
			if compareVersion(versions_list[i], versions_list[j]) > 0:
				versions_list[i], versions_list[j] = versions_list[j], versions_list[i]


versions_list = ["1.2.0","1.10","1.1","1.0.01","1.01","1.0","1.0.2","1.2"]

versions_list_text = ["1.2.0-alpha","1.10-beta","1.1-abc","1.0.01-alpha","1.01-theta","1.0-alpha","1.0.2-beta","1.2"]

print(sort_version(versions_list))
print(sort_version(versions_list_text))